FB_fast_De <- analyse_SAR.CWOSL_beta(FB_decomposed,
OSL.component = 2)
# be aware that late background subtraction results in overestimated
# background.error for background corrected data
FB_late_background <- analyse_SAR.CWOSL_beta(FB, 1, 10, 800, 999)
# black: late background, red: fast component
# be aware, that aliquot 11 is empty and for background measurement
plot_KDE(list(FB_late_background,
FB_fast_De))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_CW.OSL.Data.R')
getwd()
load("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
library(OSLdecomposition)
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, filename = "Test.pdf")
plot_OSLcurve(curve, components, filename = "Test.pdf")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, filename = "Test.tif")
plot_OSLcurve(curve, components, filename = "Test.png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
?plot_OSLcurve
# Set some reasonable parameter for a weak quartz CW-OSL decay
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
# Simulate the CW-OSL curve and add some signal noise
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
# Display the simulated curve
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
components2 <- decompose_OSLcurve(curve, components)
plot_OSLcurve(curve, components2)
file.choose(new = TRUE)
file.choose(new = FALSE)
?file.choose(new = FALSE)
A <- "C:\\Users\\mitte\\Desktop\\R\\OSLdecomposition\\Test2.pdf"
plot_OSLcurve(curve, components2, filename = A)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components2, filename = "fff")
plot_OSLcurve(curve, components2, filename = "test3.jpg")
?ggsave
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components2, filename = "fff")
plot_OSLcurve(curve, components2, title = "TEEEEEssst klsf  sdsdggui sdfdsffsf hsdf (14)")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
10e6
1e6
prettyNum(1e6)
1e2
1e3
1e4
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(2, 0.5, 0.02), n = c(1e6, 1e6, 1e7))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
library(OSLdecomposition)
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
fit_results <- fit_OSLcurve(curve)
View(fit_results)
fit_results <- fit_OSLcurve(curve, output.complex = TRUE)
library(ggplot2)
View(fit_results)
fit_results[["parameters"]][["stimulation.intensity"]]
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
plot_PhotoCrosssections(fit_results)
plot_PhotoCrosssections(fit_results)
??reverselog_trans
library(scales)
detach("package:scales", unload = TRUE)
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
?getwd
getwd()
dev.new(width = 12, height = 4, unit = "cm")
plot_PhotoCrosssections(fit_results, hide.plot = TRUE, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 12, height = 4, unit = "cm", noRStudioGD = TRUE)
dev.off()
dev.new(width = 16, height = 6, unit = "cm", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 16, height = 6, unit = "in", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 800, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 80, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 800, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 600, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
library(OSLdecomposition)
detach("package:numOSL", unload = TRUE)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
paste0(NULL, "sdf")
dir.create()
dir.exists(getwd(), "/report_figures/")
dir.exists(paste0(getwd(), "/report_figures/"))
dir.create(image_path)
dir.create(paste0(getwd(), "/report_figures/"))
getwd()
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
?ggsave()
toupper("pdf")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
load("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
is.integer(3)
is.integer(c(3))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
library(OSLdecomposition)
# the following three lines load necessary functions which will be integrated in Luminescence in the future
.LuminescenceEnv <- new.env(parent = emptyenv())
source(system.file("beta", "analyse_SAR.CWOSL_beta.R", package = "OSLdecomposition"))
source(system.file("beta", "calc_OSLLxTxDecomposed.R", package = "OSLdecomposition"))
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast", plot = FALSE)
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example 1.R')
plot_AbanicoPlot(De_late_background)
plot_AbanicoPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))
plot_AbanicoPlot(list(De_fast_component,     # red
De_medium_component))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example 2.R')
library(OSLdecomposition)
?decompose_OSLcurve
library(Luminescence)
?analyse_IRSAR.RF
?numeric
is.integer(5)
is.wholenumber(5)
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?fit_OSLcurve
?nls
?nls
library(OSLdecomposition)
?decompose_OSLcurve
?minpack.lm::nlsLM
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?decompose_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
library(OSLdecomposition)
?optimise_OSLintervals
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(components = c(2, 1), channel.number = 100, channel.width = 0.1)
A
A <- optimise_OSLintervals(components = c(2, 1), channel.number = 100, channel.width = 0.1, t.start = 4)
A
library(OSLdecomposition)
?sum_OSLcurves
# the following three lines load necessary functions which will be integrated in Luminescence in the future
.LuminescenceEnv <- new.env(parent = emptyenv())
source(system.file("beta", "analyse_SAR.CWOSL_beta.R", package = "OSLdecomposition"))
source(system.file("beta", "calc_OSLLxTxDecomposed.R", package = "OSLdecomposition"))
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, max_components = 3, report = TRUE)
library(OSLdecomposition)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, max_components = 3, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(2, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components)
plot_OSLcurve(curve, components, theme.set = ggplot2::theme_bw())
plot_OSLcurve(curve, components, theme.set = ggplot2::theme_classic())
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, theme.set = ggplot2::theme_classic())
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, theme.set = ggplot2::theme_classic())
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, theme.set = ggplot2::theme_classic())
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
name <- c("fast", "medium", "slow")
C <- data.frame
C <- data.frame(name)
lambda <- c(2, 0.5, 0.02)
n <- c(1000, 1000, 10000)
components <- data.frame(name, lambda, n)
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
library(OSLdecomposition)
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components)
plot_OSLcurve(curve, components, display = "return.lin")
plot_OSLcurve(curve, components, display = "compare_lin")
plot_OSLcurve(curve, components, display = "compare_log")
plot_OSLcurve(curve, components, show.intervals = TRUE)
plot_OSLcurve(curve, components, display = "raw")
1 == 1
1 != 1
?scales::scientific
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "raw")
plot_OSLcurve(curve, components, display = "detailed")
plot_OSLcurve(curve, components, display = "lin")
plot_OSLcurve(curve, components, display = "log")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "log")
plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "lin")
plot_OSLcurve(curve, components, display = "raw")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
A <- plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
A <- plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
A <- plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "lin")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "details")
plot_OSLcurve(curve, components, display = "detailed")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "detailed")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "log")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "loglog")
plot_OSLcurve(curve, components, display = "LM")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "LM")
plot_OSLcurve(curve, components, display = "compare_log")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
n <- c(1000000, 1000000, 10000000)
components <- data.frame(name, lambda, n)
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
plot_OSLcurve(curve, components, display = "detailed")
# Plot residual curve
p.res <- ggplot2::ggplot(curve, ggplot2::aes(x=time, y=residual)) +
ggplot2::geom_point(size = 1, shape =  16, color = "darkgrey", na.rm = TRUE) +
ggplot2::scale_y_continuous(limits = c(- res.max, res.max)) +
ggplot2::labs(subtitle = res_text, x = "Time (s)", y ="Signal (cts)") +
ggplot2::annotate("segment", x = 0, xend = max(curve$time), y = 0, yend = 0, colour = "black", size = 1) +
text_format +
scale.intervals +
res.intervals}
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "res")
plot_OSLcurve(curve, components, display = "tab")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "tab")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, display = "tab")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?plot_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?plot_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?plot_PhotoCrosssections
# Set some arbitaty decay parameter for a dim CW-OSL measurement of quartz
name <- c("fast", "medium", "slow")
lambda <- c(2, 0.5, 0.02)
n <- c(1e6, 1e6, 1e7)
# Build a component table
components <- data.frame(name, lambda, n)
# Simulate the CW-OSL curve and add some signal noise
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
# Perform nonlinear regression at the simulated curve
fit_results <- fit_OSLcurve(curve, output.complex = TRUE)
# Plot the fitting iterations and set them into context
plot_PhotoCrosssections(fit_results)
# How to create figures meant for publication:
# Open new graphics device to set image dimensions manually and save image as vector graphics
dev.new(width = 10, height = 3, unit = "cm", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.off()
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R', encoding = 'UTF-8')
# Plot the fitting iterations and set them into context
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R', encoding = 'UTF-8')
# Plot the fitting iterations and set them into context
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R', encoding = 'UTF-8')
# Plot the fitting iterations and set them into context
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R', encoding = 'UTF-8')
# Plot the fitting iterations and set them into context
plot_PhotoCrosssections(fit_results)
# How to create figures meant for publication:
# Open new graphics device to set image dimensions manually and save image as vector graphics
dev.new(width = 10, height = 3, unit = "cm", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.off()
getwd()
is.numeric(NA)
is.numeric(NULL)
?Luminescence
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_correction.R', encoding = 'UTF-8')
library(OSLdecomposition)
?RLum.OSL_correction
# 'FB_10Gy' is a dose recovery test with the La Fontainebleau quartz
# measured in a lexsyg research with green LED stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
data_set <- Luminescence::read_BIN2R(data_path, fastForward = TRUE)
# To correct for the background signal, subtracted the average curve from the
# OSL curves of an empty aliquot (list item 11) from all other OSL records:
data_set_corrected <- RLum.OSL_correction(data_set, background = 11)
global_average <- sum_OSLcurves(data_set_corrected, record_type = "OSL")
sum_OSLcurves(data_set_corrected, output.plot = TRUE, record_type = "OSL")
# Plot background curve
sum_OSLcurves(data_set_corrected, output.plot = TRUE, record_type = "OSLbackground")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_correction.R', encoding = 'UTF-8')
?scales-package
?scales::scales-package
system.file("rmd", "report_Step1.Rmd", package = "OSLdecomposition")
library(OSLdecomposition)
?RLum.OSL_global_fitting
# Identify components and create report
data_set_fitted <- RLum.OSL_global_fitting(data_set_corrected,
max_components = 3,
stimulation_intensity = 50,
stimulation_wavelength = 530)
# Identify components and create report
data_set_fitted <- RLum.OSL_global_fitting(data_set_corrected,
max_components = 3,
stimulation_intensity = 50,
stimulation_wavelength = 530)
library(OSLdecomposition)
?RLum.OSL_decomposition
# 'FB_10Gy' is a dose recovery test with the La Fontainebleau quartz
# measured in a lexsyg research with green LED stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
data_set <- Luminescence::read_BIN2R(data_path, fastForward = TRUE)
# Separate components and create report
data_set_decomposed <- RLum.OSL_global_fitting(data_set, decay_rates = c(0.8, 0.05))
data_set_decomposed <- RLum.OSL_decomposition(data_set, decay_rates = c(0.8, 0.05))
?RLum.OSL_correction
data_set_corrected <- RLum.OSL_correction(data_set, background = 11)
View(data_set_corrected)
"CORRECTION" %in% data_set_corrected[["CORRECTION"]]
"background_curve" %in% data_set_corrected[["CORRECTION"]]
data_set_corrected[["CORRECTION"]]
"parameters" %in% data_set_corrected[["CORRECTION"]]
data_set_corrected[["CORRECTION"]]$background_curv
data_set_corrected[["CORRECTION"]]$backgr
data_set_corrected[["CORRECTION"]]$sdf
"parameters" %in% names(data_set_corrected[["CORRECTION"]])
data_set_corrected[["CORRECTION"]]$parameters$subtract_offset
View(data_set)
View(data_set_decomposed)
names(data_set_decomposed[["DECOMPOSITION"]])
data_set_decomposed[[1]]@records[[1]]@info[["COMPONENTS"]]
class(data_set_decomposed[[1]]@records[[1]])
?RLum.OSL_global_fitting
data_set_fitted <- RLum.OSL_global_fitting(data_set_corrected,
K_maximum = 3,
stimulation_intensity = 50,
stimulation_wavelength = 530)
names(data_set_fitted[["OSL_COMPONENTS"]])
View(data_set_fitted)
data_set_fitted[["OSL_COMPONENTS"]]$F.test.print
kable(data_set_fitted[["OSL_COMPONENTS"]]$F.test.print)
?kable
class(data_set_fitted[["OSL_COMPONENTS"]][["fit.results"]][[1]][["DE"]])
library(OSLdecomposition)
?RLum.OSL_decomposition
?RLum.OSL_global_fitting
?sum_OSLcurves
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
data_set <- Luminescence::read_BIN2R(data_path, fastForward = TRUE)
average_curve <- sum_OSLcurves(data_set, aliquot_selection = c(1:5))
?class
test <- data.frame(f = 1)
is(test, "dd")
is(test, "data.frame")
class(test)
c(name, lambda)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library("OSLdecomposition")
?plot_OSLcurve
# Set some arbitaty decay parameter for a dim CW-OSL measurement of quartz
name <- c("fast", "medium", "slow")
lambda <- c(2, 0.5, 0.02)
n <- c(1000, 1000, 10000)
# Build a component table
components <- data.frame(name, lambda, n)
# Simulate a CW-OSL curve including some signal noise
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
# Display the simulated curve
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
# Set some arbitaty decay parameter for a dim CW-OSL measurement of quartz
name <- c("fast", "medium", "slow")
lambda <- c(2, 0.5, 0.02)
n <- c(1000, 1000, 10000)
# Build a component table
components <- data.frame(name, lambda, n)
# Simulate a CW-OSL curve including some signal noise
curve <- simulate_OSLcomponents(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
# Display the simulated curve
plot_OSLcurve(curve, components)
time <- signal <- record <- NULL
?time
library(OSLdecomposition)
?sum_OSLcurves
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
# 'FB_10Gy' is a dose recovery test with the La Fontainebleau quartz
# measured in a lexsyg research with green LED stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
data_set <- Luminescence::read_BIN2R(data_path, fastForward = TRUE)
average_curve <- sum_OSLcurves(data_set, aliquot_selection = c(1:5))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
# 'FB_10Gy' is a dose recovery test with the La Fontainebleau quartz
# measured in a lexsyg research with green LED stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
data_set <- Luminescence::read_BIN2R(data_path, fastForward = TRUE)
average_curve <- sum_OSLcurves(data_set, aliquot_selection = c(1:3))
library(OSLdecomposition)
249 * 0.0475
249 + 11.83

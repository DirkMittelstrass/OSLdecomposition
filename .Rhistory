fit_OSLcurve(C, K.max = 2)
fit_OSLcurve(D, K.max = 2)
fit_OSLcurve(D, K.max = 4, F.threshold = 1)
D <- matrix(c(0, 1, 2, 10, 5, 3), ncol=2)
fit_OSLcurve(D, K.max = 2, F.threshold = 1)
D <- matrix(c(0, 1, 2, 3, 4, 42, 21, 10, 5, 3), ncol=2)
fit_OSLcurve(D, K.max = 3, F.threshold = 1)
E <- fit_OSLcurve(D, K.max = 3, F.threshold = 1)
View(E)
E <- fit_OSLcurve(D, K.max = 3, F.threshold = 1, output.complex = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
E <- fit_OSLcurve(D, K.max = 3, F.threshold = 1, output.complex = TRUE)
View(E)
D <- matrix(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 42, 21, 11, 7, 5, 4, 3), ncol=2)
D <- matrix(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 42, 21, 11, 7, 5, 4, 3), ncol=2)
D2 <- cbind(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), (42, 21, 11, 7, 5, 4, 3))
D2 <- cbind(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), c(42, 21, 11, 7, 5, 4, 3))
View(D2)
curve <- cbind(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7), c(42, 21, 11, 7, 5, 4, 3))
components <- fit_OSLcurve(curve, F.threshold = 3)
plot_OSLcurve(curve, components)
# Create arbitary decay curve
curve <- cbind(c(1, 2, 3, 4, 5, 6, 7, 8, 9),
c(42, 21, 11, 7, 5, 4, 3.1, 2.4, 2))
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
# Display results
plot_OSLcurve(curve, components)
### Example 1: Fitting of some arbitary decay curve ###
# Create curve with two components
curve <- cbind(c(1, 2, 3, 4, 5, 6, 7, 8, 9),
c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
# Display results
plot_OSLcurve(curve, components, display = "lin-log")
OSLdata <- Luminescence::Risoe.BINfileData2RLum.Analysis(Luminescence::CWOSL.SAR.Data)
OSLdata <- Luminescence::Risoe.BINfileData2RLum.Analysis(CWOSL.SAR.Data)
data(Luminescence::ExampleData.BINfileData, envir = environment())
OSLdata <- Luminescence::Risoe.BINfileData2RLum.Analysis(CWOSL.SAR.Data)
data(Luminescence::ExampleData.BINfileData, envir = environment())
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# TODO
# -
library(Luminescence)
library(numOSL)
library(OSLdecomposition)
library(knitr)
knitr::opts_chunk$set(fig.width=10, fig.asp=.6, warning=FALSE, error=FALSE, echo=FALSE)
# alternative simulations:
V.list <- list(n.Fast = c(0, 1000, 3000, 10000, 30000),
n.Medium = c(0, 1000, 3000),
n.Slow1 = c(0, 3000, 10000),
n.Slow2 = c(10000, 30000, 100000),
Background = c(0),
Channels = c(100, 200, 400),
Channel.width = c(0.1, 0.2, 0.5),
Additions = c(500),
Algorithm = c(1,2,3))
V.list <- list(n.Fast = c(0, 1000, 3000, 10000, 30000),
n.Medium = c(0, 1000, 3000, 10000),
n.Slow1 = c(0, 3000, 10000, 30000),
n.Slow2 = c(10000, 30000, 100000),
Background = c(0),
Channels = c(100, 200, 400),
Channel.width = c(0.1, 0.2, 0.5),
Additions = c(100, 400),
Algorithm = c(0, 1))
# ToDo, use more accurate lambda values
#lambda <- c(Fast = 2, Medium = 0.5, Slow1 = 0.1, Slow2 = 0.02)
# Calculated from Durcan & Duller, assuming an stimulation intensity of 30 mW/cm² (typical for a Risö OSL/TL DA-15)
lambda <- c(Fast = 1.9, Medium = 0.3, Slow1 = 0.08, Slow2 = 0.02)
X <- 1:length(lambda)
#algorithm_names <- c("DE","DE+LM")
V.list <- list(n.Fast = c(0, 1000, 3000, 10000),
n.Medium = c(0, 1000, 3000, 10000),
n.Slow1 = c(0, 3000, 10000, 30000),
n.Slow2 = c(10000, 30000, 100000),
Background = c(0, 30),
Channels = c(100, 200, 400),
Channel.width = c(0.1, 0.2, 0.5),
Additions = c(100, 400))
# from earlier simulations, we showed that the impact of uncorrected background signals,
# as well as from the number of additions is insignificant
# it was also shown, that unweighted fitting (Chi² = RSS) leads to more precise
# fast and medium component decay rates
V.max <- NULL
for (i in 1:length(V.list)) {
V.max <- c(V.max, length(V.list[[i]]))
}
N <- prod(V.max)
cat("Number of scenarios:", N,"\n")
cat("Estimated time:", N * 0.33 / 60,"h\n")
V.i <- rep(1, length(V.list))
V.table <- data.frame(NULL)
for (j in 1:N) {
V <- NULL
for (i in 1:length(V.list)) {
if(V.i[i] > V.max[i]) {
V.i[i] <- 1
V.i[i + 1] <- V.i[i + 1] + 1
}
V <- c(V, V.list[[i]][V.i[i]])
}
V.i[1] <- V.i[1] + 1
V.table <- rbind(V.table, V) #, stringsAsFactors = FALSE)
}
colnames(V.table) <- names(V.list)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
if (c(TRUE, FALSE)) cat("Test")
A <- list(data.frame(a = "A"), c(1,2,3))
attr(A, "class")
attr(A, class)
attr(A, "class")
attr(A[[1]], "class")
is(A)
is(A)[1]
is(A[[1]])[1]
B <- stop("f")
B
B <- try(stop("f"))
is(B[[1]])[1]
is(B)[1]
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example_CW.OSL.Data.R')
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
ibrary(Luminescence)
library(OSLdecomposition)
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
library(Luminescence)
library(OSLdecomposition)
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(Luminescence)
library(OSLdecomposition)
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
View(FB_fitted)
FB_fitted[["OSL_COMPONENTS"]][["curve"]][["signal"]]
FB_fitted[[1]]@records[[1]]@data
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
load("C:/Users/mitte/Desktop/Step1 Sim/Sim_20-08-2020.RData")
View(C.list)
C.list[[6]]$input %in% C.list[[6]]
names(C.list[[6]])
"input" %in% "C.list[[6]]"
"input" %in% names(C.list[[6]])
"output" %in% names(C.list[[6]])
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R')
library(OSLdecomposition)
library(Luminescence)
load("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
(1:K - 1)
(1:4 - 1)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
1:(2-1)
1:(5-1)
(100 - 4):(100 - 1)
(100 - 1):(100 - 1)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
sort(c(2,1,3))
c(0,sort(c(2,1,3)),4)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
comp <- data.frame(lambda = c(2, 0.5, 0.01))
source('C:/Users/mitte/Desktop/R/_alt/2019-10-27 OSLdecomposition/R/calc_OSLintervals.R')
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200)
comp <- data.frame(name = c("A", "B", "C"), lambda = c(2, 0.5, 0.01))
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200)
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(c(2, 0.5, 0.02), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(c(2, 0.5, 0.02), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
print.data.frame(A , row.names = FALSE)
print(A , row.names = FALSE)
print(A)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
View(A)
A_sim <- A
A_sim$n <- c(5000, 3000, 50000, 10)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
A_curve <- simulate_OSLcurve(A_sim, simulate.curve = TRUE)
View(A_curve)
decompose_OSLcurve(A_curve, A)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
A_sim
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
cbind(time = c(1, 2, 3, 4, 5, 6, 7, 8, 9), signal = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 20)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 20)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 40)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 40)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
plot_OSLcurve(curve, components)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
log(0)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
stop(paste0("Background fitting is activated but not background integration interval is given.",
"Please run: <components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
stop(paste0("Background fitting is activated but not background integration interval is given.\n",
"Please run: <components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
stop(paste0("Background fitting is activated but no background integration interval is given.\n",
"Background integration interval can be defined by running: \n",
"<components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
components <- optimise_OSLintervals(components, curve, background.fitting = TRUE)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
components <- optimise_OSLintervals(components, curve, background.fitting = TRUE)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
curve <- cbind(time = c(1, 2, 3, 4, 5, 6, 7, 8, 9), signal = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
components <- fit_OSLcurve(curve, F.threshold = 3)
curve <- cbind(X = c(1, 2, 3, 4, 5, 6, 7, 8, 9), Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
?is
?as.formula
library(OSLdecomposition)
?optimise_OSLintervals()
# Step 1
Oy7 <- RLum.OSL_global_fitting(Oy7, report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example_Oy7.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_BT594.R')
View(BT594)
View(BT594)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_CW.OSL.Data.R')
plot_RadialPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))  # green
OSLdata_decomposed <- RLum.OSL_decomposition(OSLdata_fitted, K = 3)
# The De's for specific signal components can be calculated without the need of
# defining integration intervals
De_fast_component <- analyse_SAR.CWOSL_beta(OSLdata_decomposed, OSL.component = 1)
De_medium_component <- analyse_SAR.CWOSL_beta(OSLdata_decomposed, OSL.component = 2)
# We can compare the component-based De's with the classical calculated late background subtraction De's
De_late_background <- analyse_SAR.CWOSL_beta(OSLdata, 1, 14, 800, 1000, plot = FALSE)
plot_KDE(list(De_late_background,   # black
De_fast_component,    # red
De_medium_component)) # green
plot_RadialPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))  # green
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_FB.R')
FB_fast_De <- analyse_SAR.CWOSL_beta(FB_decomposed,
OSL.component = 2)
plot_KDE(list(FB_late_background,
FB_fast_De))
FB_corrected <- RLum.OSL_correction(FB) #, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
FB_decomposed <-RLum.OSL_decomposition(FB_fitted,
report = report)
FB_fast_De <- analyse_SAR.CWOSL_beta(FB_decomposed,
OSL.component = 2)
# be aware that late background subtraction results in overestimated
# background.error for background corrected data
FB_late_background <- analyse_SAR.CWOSL_beta(FB, 1, 10, 800, 999)
# black: late background, red: fast component
# be aware, that aliquot 11 is empty and for background measurement
plot_KDE(list(FB_late_background,
FB_fast_De))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_CW.OSL.Data.R')

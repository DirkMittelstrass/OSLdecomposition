data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
library(Luminescence)
library(OSLdecomposition)
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(Luminescence)
library(OSLdecomposition)
report <- TRUE # To save a lot of computing time, disable auto-reporting
# FB_10Gy is a dose recovery test with the La Fontainebleau quartz in the Bayreuth lexsyg system with green stimulation
data_path <- system.file("examples", "FB_10Gy_SAR.bin", package = "OSLdecomposition")
FB <- read_BIN2R(data_path, fastForward = TRUE)
# Adequate background correction is recommended to prevent slow component overestimation.
# Here, the OSL measurements of an empty aliquot (data set entry 11) is subtracted from the other OSL
# measurements
FB_corrected <- RLum.OSL_correction(FB, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
View(FB_fitted)
FB_fitted[["OSL_COMPONENTS"]][["curve"]][["signal"]]
FB_fitted[[1]]@records[[1]]@data
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
load("C:/Users/mitte/Desktop/Step1 Sim/Sim_20-08-2020.RData")
View(C.list)
C.list[[6]]$input %in% C.list[[6]]
names(C.list[[6]])
"input" %in% "C.list[[6]]"
"input" %in% names(C.list[[6]])
"output" %in% names(C.list[[6]])
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R')
library(OSLdecomposition)
library(Luminescence)
load("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
(1:K - 1)
(1:4 - 1)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
1:(2-1)
1:(5-1)
(100 - 4):(100 - 1)
(100 - 1):(100 - 1)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5), channel.width = 0.1, channel.number = 200)
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
sort(c(2,1,3))
c(0,sort(c(2,1,3)),4)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(2, 0.5, 0.01), channel.width = 0.1, channel.number = 200)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/calc_OSLintervals.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
comp <- data.frame(lambda = c(2, 0.5, 0.01))
source('C:/Users/mitte/Desktop/R/_alt/2019-10-27 OSLdecomposition/R/calc_OSLintervals.R')
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200)
comp <- data.frame(name = c("A", "B", "C"), lambda = c(2, 0.5, 0.01))
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200)
calc_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(comp, channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = FALSE)
optimise_OSLintervals(c(3,2,1,0.5), channel.width = 0.1, channel.number = 200, t.end = 10, t.start = 3, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(c(2, 0.5, 0.02), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(c(2, 0.5, 0.02), channel.width = 0.1, channel.number = 200, background.fitting = TRUE)
print.data.frame(A , row.names = FALSE)
print(A , row.names = FALSE)
print(A)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
View(A)
A_sim <- A
A_sim$n <- c(5000, 3000, 50000, 10)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
A_curve <- simulate_OSLcurve(A_sim, simulate.curve = TRUE)
View(A_curve)
decompose_OSLcurve(A_curve, A)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
A_sim
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
decompose_OSLcurve(A_curve, A, algorithm = "det+nls", background.fitting = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
cbind(time = c(1, 2, 3, 4, 5, 6, 7, 8, 9), signal = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 20)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 20)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 40)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE, add.background = 40)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
plot_OSLcurve(curve, components)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
log(0)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
stop(paste0("Background fitting is activated but not background integration interval is given.",
"Please run: <components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
stop(paste0("Background fitting is activated but not background integration interval is given.\n",
"Please run: <components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
stop(paste0("Background fitting is activated but no background integration interval is given.\n",
"Background integration interval can be defined by running: \n",
"<components> <- optimise_OSLintervals(<components>, <curve>, background.fitting = TRUE)"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
components <- optimise_OSLintervals(components, curve, background.fitting = TRUE)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
components <- decompose_OSLcurve(curve, components, background.fitting = FALSE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
components <- optimise_OSLintervals(components, curve, background.fitting = TRUE)
components <- decompose_OSLcurve(curve, components, background.fitting = TRUE)
plot_OSLcurve(curve, components)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/simulate_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R', encoding = 'UTF-8')
curve <- cbind(time = c(1, 2, 3, 4, 5, 6, 7, 8, 9), signal = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
components <- fit_OSLcurve(curve, F.threshold = 3)
curve <- cbind(X = c(1, 2, 3, 4, 5, 6, 7, 8, 9), Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
?is
?as.formula
library(OSLdecomposition)
?optimise_OSLintervals()
# Step 1
Oy7 <- RLum.OSL_global_fitting(Oy7, report = report)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example_Oy7.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_BT594.R')
View(BT594)
View(BT594)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast")
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_CW.OSL.Data.R')
plot_RadialPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))  # green
OSLdata_decomposed <- RLum.OSL_decomposition(OSLdata_fitted, K = 3)
# The De's for specific signal components can be calculated without the need of
# defining integration intervals
De_fast_component <- analyse_SAR.CWOSL_beta(OSLdata_decomposed, OSL.component = 1)
De_medium_component <- analyse_SAR.CWOSL_beta(OSLdata_decomposed, OSL.component = 2)
# We can compare the component-based De's with the classical calculated late background subtraction De's
De_late_background <- analyse_SAR.CWOSL_beta(OSLdata, 1, 14, 800, 1000, plot = FALSE)
plot_KDE(list(De_late_background,   # black
De_fast_component,    # red
De_medium_component)) # green
plot_RadialPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))  # green
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_FB.R')
FB_fast_De <- analyse_SAR.CWOSL_beta(FB_decomposed,
OSL.component = 2)
plot_KDE(list(FB_late_background,
FB_fast_De))
FB_corrected <- RLum.OSL_correction(FB) #, background = 11)
FB_fitted <- RLum.OSL_global_fitting(FB_corrected,
stimulation_intensity = 50,
stimulation_wavelength = 530,
report = report)
FB_decomposed <-RLum.OSL_decomposition(FB_fitted,
report = report)
FB_fast_De <- analyse_SAR.CWOSL_beta(FB_decomposed,
OSL.component = 2)
# be aware that late background subtraction results in overestimated
# background.error for background corrected data
FB_late_background <- analyse_SAR.CWOSL_beta(FB, 1, 10, 800, 999)
# black: late background, red: fast component
# be aware, that aliquot 11 is empty and for background measurement
plot_KDE(list(FB_late_background,
FB_fast_De))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/inst/examples/example_CW.OSL.Data.R')
getwd()
load("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
library(OSLdecomposition)
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, filename = "Test.pdf")
plot_OSLcurve(curve, components, filename = "Test.pdf")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components, filename = "Test.tif")
plot_OSLcurve(curve, components, filename = "Test.png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
?plot_OSLcurve
# Set some reasonable parameter for a weak quartz CW-OSL decay
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.1), n = c(1000, 1000, 10000))
# Simulate the CW-OSL curve and add some signal noise
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
# Display the simulated curve
plot_OSLcurve(curve, components)
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(1.5, 0.5, 0.02), n = c(1000, 1000, 10000))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
components2 <- decompose_OSLcurve(curve, components)
plot_OSLcurve(curve, components2)
file.choose(new = TRUE)
file.choose(new = FALSE)
?file.choose(new = FALSE)
A <- "C:\\Users\\mitte\\Desktop\\R\\OSLdecomposition\\Test2.pdf"
plot_OSLcurve(curve, components2, filename = A)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components2, filename = "fff")
plot_OSLcurve(curve, components2, filename = "test3.jpg")
?ggsave
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(curve, components2, filename = "fff")
plot_OSLcurve(curve, components2, title = "TEEEEEssst klsf  sdsdggui sdfdsffsf hsdf (14)")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
10e6
1e6
prettyNum(1e6)
1e2
1e3
1e4
components <- data.frame(name = c("fast", "medium", "slow"), lambda = c(2, 0.5, 0.02), n = c(1e6, 1e6, 1e7))
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
library(OSLdecomposition)
curve <- simulate_OSLcurve(components, simulate.curve = TRUE, add.poisson.noise = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
fit_results <- fit_OSLcurve(curve)
View(fit_results)
fit_results <- fit_OSLcurve(curve, output.complex = TRUE)
library(ggplot2)
View(fit_results)
fit_results[["parameters"]][["stimulation.intensity"]]
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
plot_PhotoCrosssections(fit_results)
plot_PhotoCrosssections(fit_results)
??reverselog_trans
library(scales)
detach("package:scales", unload = TRUE)
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
plot_PhotoCrosssections(fit_results)
?getwd
getwd()
dev.new(width = 12, height = 4, unit = "cm")
plot_PhotoCrosssections(fit_results, hide.plot = TRUE, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 12, height = 4, unit = "cm", noRStudioGD = TRUE)
dev.off()
dev.new(width = 16, height = 6, unit = "cm", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 16, height = 6, unit = "in", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
dev.new(width = 800, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 80, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 800, height = 250, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 600, height = 200, unit = "px", noRStudioGD = TRUE)
dev.new(width = 700, height = 200, unit = "px", noRStudioGD = TRUE)
plot_PhotoCrosssections(fit_results, filename = paste0(getwd(), "//plot.pdf"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_PhotoCrosssections.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
library(OSLdecomposition)
detach("package:numOSL", unload = TRUE)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
paste0(NULL, "sdf")
dir.create()
dir.exists(getwd(), "/report_figures/")
dir.exists(paste0(getwd(), "/report_figures/"))
dir.create(image_path)
dir.create(paste0(getwd(), "/report_figures/"))
getwd()
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
?ggsave()
toupper("pdf")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
load("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
is.integer(3)
is.integer(c(3))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/DevSpace.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
library(OSLdecomposition)
# the following three lines load necessary functions which will be integrated in Luminescence in the future
.LuminescenceEnv <- new.env(parent = emptyenv())
source(system.file("beta", "analyse_SAR.CWOSL_beta.R", package = "OSLdecomposition"))
source(system.file("beta", "calc_OSLLxTxDecomposed.R", package = "OSLdecomposition"))
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE)
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
# Components can also be selected by their name
results_decomposed <- analyse_SAR.CWOSL_beta(BT594, OSL.component = "fast", plot = FALSE)
results_late_background <- analyse_SAR.CWOSL_beta(BT594, 1, 3, 80, 100, plot = FALSE)
plot_RadialPlot(list(results_late_background, results_decomposed))
plot_KDE(list(results_late_background, results_decomposed))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example 1.R')
plot_AbanicoPlot(De_late_background)
plot_AbanicoPlot(list(De_late_background,    # black
De_fast_component,     # red
De_medium_component))
plot_AbanicoPlot(list(De_fast_component,     # red
De_medium_component))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/examples/example 2.R')
library(OSLdecomposition)
?decompose_OSLcurve
library(Luminescence)
?analyse_IRSAR.RF
?numeric
is.integer(5)
is.wholenumber(5)
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
library(OSLdecomposition)
?fit_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?fit_OSLcurve
?nls
?nls
library(OSLdecomposition)
?decompose_OSLcurve
?minpack.lm::nlsLM
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?decompose_OSLcurve
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
library(OSLdecomposition)
?optimise_OSLintervals
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/optimise_OSLintervals.R', encoding = 'UTF-8')
A <- optimise_OSLintervals(components = c(2, 1), channel.number = 100, channel.width = 0.1)
A
A <- optimise_OSLintervals(components = c(2, 1), channel.number = 100, channel.width = 0.1, t.start = 4)
A

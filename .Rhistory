library(OSLdecomposition)
# fig.width=6,
knitr::opts_chunk$set(fig.width=7,
fig.asp=.4,
results = "asis",
warning=FALSE,
message=FALSE,
error=FALSE,
echo=FALSE,
cache=FALSE)
# fig.align="center",
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\Batagai_2-7_B-2-47_OSL_63-100_2mm_Qz1_ed.BIN"
path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BK-8_1295-1280_63-40um_2mm_Qz1_ed.BIN"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\Oy7-01-14_63-100_1mm_Qz1-1_ed.BIN"
# c(1:4)
# SINGLE GRAIN
#path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\C-SAL1_SG_disc2.BIN"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\SUV3_SG_disc1-4.BIN"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BT1214_all_FKQ_mx.BIN"
# c(22)
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BT594_607_608_612_619.BIN"
# c(25:48)
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BT1713_SAR_classic.bin"
### DATA SET ###
#path <- file.choose()
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BT1713_SAR_classic.bin"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\BT1713_SAR_RT.bin"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\FB_10Gy_SAR_classic.bin"
# path <- "C:\\Users\\mitte\\Desktop\\Masterarbeit\\data\\FB_10Gy_SAR_RT.bin"
# background = c(11)
# read BIN file:
lum_data <- read_BIN2R(path,
fastForward = TRUE,
txtProgressBar = FALSE)
N.raw <- length(lum_data)
# Data set dependend parameters
record_type <- "OSL"
#drop_selection <-c(1:4)  c(22) c(25:48)
drop_selection <- 1:4
drop_selection_text <- "none"
if (!is.null(drop_selection)) {
if (length(drop_selection) > 8) {
drop_selection_text <- paste0(min(drop_selection)," - ", max(drop_selection))
} else {
drop_selection_text <- paste(drop_selection, collapse = ",")
}
}
background_selection <- NULL
background_selection_text <- "none"
if (!is.null(background_selection)) background_selection_text <- paste(background_selection, collapse = ",")
lum_data[drop_selection] <- NULL
example_aliquot <- 1
n.table <- 1
n.figure <- 1
first_aliquot <- lum_data[[1]][[record_type]]
N.aliquots <- length(lum_data) - length(background_selection)
#, fig.cap="Figure `1`: Global mean curve (blue); Data points of all OSL curves (grey opaque); First OSL record of first aliquot (red)."
# calc arithmetic mean curve
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = TRUE,
plot.global = TRUE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Raw data points of all OSL curves (grey opaque) and natural dose OSL curve of first aliquot (red)*"))
n.figure <- n.figure + 1
#, fig.cap="Figure `1`: Global mean curve (blue); Data points of all OSL curves (grey opaque); First OSL record of first aliquot (red)."
# calc arithmetic mean curve
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = TRUE,
plot.global = TRUE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Raw data points of all OSL curves (grey opaque) and natural dose OSL curve of first aliquot (red)*"))
n.figure <- n.figure + 1
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R')
#, fig.cap="Figure `1`: Global mean curve (blue); Data points of all OSL curves (grey opaque); First OSL record of first aliquot (red)."
# calc arithmetic mean curve
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = TRUE,
plot.global = TRUE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Raw data points of all OSL curves (grey opaque) and natural dose OSL curve of first aliquot (red)*"))
n.figure <- n.figure + 1
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/sum_OSLcurves.R')
#, fig.cap="Figure `1`: Global mean curve (blue); Data points of all OSL curves (grey opaque); First OSL record of first aliquot (red)."
# calc arithmetic mean curve
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = TRUE,
plot.global = TRUE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Raw data points of all OSL curves (grey opaque) and natural dose OSL curve of first aliquot (red)*"))
n.figure <- n.figure + 1
sample_type <- "small size grain quartz"
single_grain <- FALSE
expected_value <- 50 # ka or Gy if age_rate = 1
applied_predose <- 0 # same unit as expected
expected_unit <- "ka"
# Dosisleistung lexsyg bayreuth am 18.06.19
# Grobkorn: 0.0525 ± 0.0028 Gy/s
# Feinkorn: 0.0563 ± 0.0022 Gy/s
# values from Maggis Sibirian data sets
dose_rate <- 4.95 / 60 # Gy/s
# dose_rate <- 1 # Gy/s
dose_unit <- "Gy" # "s" if dose_rate = 1
# age_rate <- 1 / 1.3
#age_rate <- NA # ka/Gy
age_rate <- 0.635 # ka/Gy
#age_rate <- 1
age_unit <- "ka"
# Stimulation parameters
stimulation_wavelength <- 470
stimulation_intensity <- 35  # mW cm^-2
# Algorithm parameters
cut_time <- 40
max_components <- 5
F_threshold <- 50
algorithm <- "det+nls"
fit_method <- "EXP"
recuperation_rate <- 0.05
recycling_ratio <- 0.1
### some minor things ###
if (expected_unit == "s") {
expected_dose <- dose_rate * expected_value
applied_predose <- dose_rate * applied_predose
expected_age <- age_rate * expected_dose
} else if (expected_unit == "Gy") {
expected_dose <- expected_value
expected_age <- age_rate * expected_dose
} else if (expected_unit == "ka") {
expected_dose <- expected_value / age_rate
expected_age <- expected_value
}
digits_DE <- 1
digits_age <- 1
if (is.finite(expected_dose)) {
digits_DE <- 2 - round(log10(expected_dose))
digits_age <- 2 - round(log10(expected_age))
}
applied_time_cut <- FALSE
# alter the data
# ToDo:
# - background substraction
# - single grain measurement cut
if (max(global_curve$time) > cut_time) {
cat(paste0("* The measurement duration of ", prettyNum(max(global_curve$time)) ,
" s exceed the preset cut time of ", cut_time,
" s. Because long measurements may lead to over-fitting and imprecise fast-decaying component fitting, all records are reduced to the cut time."))
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
cut.time = cut_time)
applied_time_cut <- TRUE
}
if (!is.null(background_selection)) {
cat(paste0("* Aliquot ", background_selection_text,
" is set as background measurement. All OSL records are combined to a mean curve. This mean curve is subtracted from all other records of the data set."))
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
background.aliquot = background_selection,
background.plot = TRUE)
cat(paste0("<pre>*Figure ", n.figure,": Mean curve of background measurements (blue) and data points of all background measurement (black)*"))
n.figure <- n.figure + 1
}
if (single_grain) {
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
tailor.single.grain = TRUE)
}
# find components via fitting and F-statistics
C.list <- fit_OSLcurve(global_curve,
K.max = max_components,
F.threshold = F_threshold,
stimulation.intensity = stimulation_intensity,
stimulation.wavelength = stimulation_wavelength,
applied.time.cut = applied_time_cut,
background.fitting = FALSE,
verbose = FALSE,
output.plot = FALSE)
K.selected <- C.list$K.selected
SAR.list <- list(NULL)
# Classic late background signal calculation:
components.late <- calc_classicOSLsignal(global_curve,
algorithm = "late",
stimulation.intensity = stimulation_intensity,
verbose = FALSE)
SAR.list[[1]] <- decompose_SARdata(lum_data,
components = components.late,
record_type = record_type,
algorithm = "late",
dose.rate = dose_rate,
recuperation_rate = recuperation_rate,
recycling_ratio = recycling_ratio,
applied.pre.dose = applied_predose,
fit.method = fit_method,
verbose = FALSE)
# Classic early background signal calculation:
components.early <- calc_classicOSLsignal(global_curve,
algorithm = "early",
stimulation.intensity = stimulation_intensity,
verbose = FALSE)
SAR.list[[2]] <- decompose_SARdata(lum_data,
components = components.early,
record_type = record_type,
algorithm = "early",
dose.rate = dose_rate,
recuperation_rate = recuperation_rate,
recycling_ratio = recycling_ratio,
applied.pre.dose = applied_predose,
fit.method = fit_method,
verbose = FALSE)
2^16
(2^16)^2
(2^16)^2 / 1000
(2^16)^2 / 1000^2
(2^15)^2 / 1000^2
2^3
3^3
8^3
library(Luminescence)
install.packages(c("bbmle", "BH", "callr", "cli", "covr", "curl", "data.table", "DEoptim", "devtools", "digest", "dplyr", "DT", "fansi", "fs", "ggplot2", "ggpubr", "gh", "hms", "htmlwidgets", "jsonlite", "knitr", "later", "Luminescence", "mime", "pillar", "pkgbuild", "plotrix", "plyr", "prettyunits", "processx", "ps", "purrr", "R6", "raster", "Rcpp", "RcppArmadillo", "remotes", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "scales", "shiny", "sp", "stringi", "testthat", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "yaml", "zoo"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_DataSet.R')
#Script.date <- "2020-03-06"
#Time.needed <- Sys.time()
library(Luminescence)
library(numOSL)
library(knitr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(OSLdecomposition)
# fig.width=6,
knitr::opts_chunk$set(fig.width=7,
fig.asp=.4,
results = "asis",
warning=FALSE,
message=FALSE,
error=FALSE,
echo=FALSE,
cache=FALSE)
# fig.align="center",
#path <- file.choose()
path <- "C:\\Users\\mitte\\Desktop\\OSL decomposition\\application\\BT1713_SAR_classic.bin"
# read BIN file:
lum_data <- read_BIN2R(path,
fastForward = TRUE,
txtProgressBar = FALSE)
#Script.date <- "2020-03-06"
#Time.needed <- Sys.time()
library(Luminescence)
library(numOSL)
library(knitr)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(OSLdecomposition)
# fig.width=6,
knitr::opts_chunk$set(fig.width=7,
fig.asp=.4,
results = "asis",
warning=FALSE,
message=FALSE,
error=FALSE,
echo=FALSE,
cache=FALSE)
# fig.align="center",
# read BIN file:
lum_data <- read_BIN2R(path,
fastForward = TRUE,
txtProgressBar = FALSE)
# read BIN file:
lum_data <- read_BIN2R(path,
fastForward = TRUE,
txtProgressBar = FALSE)
#path <- file.choose()
path <- "C:\\Users\\mitte\\Desktop\\OSL decomposition\\application\\BT1713\\BT1713_SAR_classic.bin"
# read BIN file:
lum_data <- read_BIN2R(path,
fastForward = TRUE,
txtProgressBar = FALSE)
N.raw <- length(lum_data)
# Data set dependend parameters
record_type <- "OSL"
#drop_selection <-c(1:4)  c(22)
drop_selection <- NULL
drop_selection_text <- "none"
if (!is.null(drop_selection)) drop_selection_text <- paste(drop_selection, collapse = ",")
background_selection <- NULL
background_selection_text <- "none"
if (!is.null(background_selection)) background_selection_text <- paste(background_selection, collapse = ",")
lum_data[drop_selection] <- NULL
example_aliquot <- 1
n.table <- 1
n.figure <- 1
first_aliquot <- lum_data[[1]][[record_type]]
N.aliquots <- length(lum_data) - length(background_selection)
#, fig.cap="Figure `1`: Global mean curve (blue); Data points of all OSL curves (grey opaque); First OSL record of first aliquot (red)."
# calc arithmetic mean curve
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = TRUE,
plot.global = FALSE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Raw data points of all OSL curves (grey opaque) and natural dose OSL curve of first aliquot (red)*"))
n.figure <- n.figure + 1
sample_type <- "fine grain quartz"
single_grain <- FALSE
expected_value <- NA # ka or Gy if age_rate = 1
applied_predose <- 0 # same unit as expected
expected_unit <- "Gy"
# values from Maggis Sibirian data sets
# dose_rate <- 4.95 / 60 # Gy/s
#dose_unit <- "Gy" # "s" if dose_rate = 1
#age_rate <- 0.635 # ka/Gy
age_rate <- NA
# Dosisleistung lexsyg bayreuth am 18.06.19
# Grobkorn: 0.0525 ± 0.0028 Gy/s
# Feinkorn: 0.0563 ± 0.0022 Gy/s
dose_rate <- 0.0563 # Gy/s
# dose_rate <- 1 # Gy/s
dose_unit <- "Gy" # "s" if dose_rate = 1
#age_rate <- NA # ka/Gy
# Stimulation parameters
stimulation_wavelength <- 470
stimulation_intensity <- 30  # mW cm^-2
# Algorithm parameters
cut_time <- 40
max_components <- 3
F_threshold <- 50
algorithm <- "det+nls"
### some minor things ###
if (expected_unit == "s") {
expected_dose <- dose_rate * expected_value
applied_predose <- dose_rate * applied_predose
expected_age <- age_rate * expected_dose
} else if (expected_unit == "Gy") {
expected_dose <- expected_value
expected_age <- age_rate * expected_dose
} else if (expected_unit == "ka") {
expected_dose <- expected_value / age_rate
expected_age <- expected_value
}
if (is.finite(expected_dose)) {
digits_DE <- 2 - round(log10(expected_dose))
} else { digits_DE <- 1 }
applied_time_cut <- FALSE
# alter the data
# ToDo:
# - background substraction
# - single grain measurement cut
if (max(global_curve$time) > cut_time) {
cat(paste0("* The measurement duration of ", prettyNum(max(global_curve$time)) ,
" s exceed the preset cut time of ", cut_time,
" s. Because long measurements may lead to over-fitting and imprecise fast-decaying component fitting, all records are reduced to the cut time."))
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
cut.time = cut_time)
applied_time_cut <- TRUE
}
if (!is.null(background_selection)) {
cat(paste0("* Aliquot ", background_selection_text,
" is set as background measurement. All OSL records are combined to a mean curve. This mean curve is subtracted from all other records of the data set."))
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
background.aliquot = background_selection,
background.plot = TRUE)
cat(paste0("<pre>*Figure ", n.figure,": Mean curve of background measurements (blue) and data points of all background measurement (black)*"))
n.figure <- n.figure + 1
}
if (single_grain) {
# cut records
lum_data <- prepare_OSLdata(lum_data,
record.type = record_type,
tailor.single.grain = TRUE)
}
# calc arithmetic mean curve, again
global_curve <- sum_OSLcurves(lum_data,
record_type = record_type,
output.plot = TRUE,
plot.first = FALSE,
plot.global = TRUE,
title = NULL,
verbose = FALSE)
cat(paste0("<pre>*Figure ", n.figure,": Global mean ", record_type, " curve (blue) and data points of all OSL records (grey opaque)*"))
n.figure <- n.figure + 1
# find components via fitting and F-statistics
C.list <- fit_OSLcurve(global_curve,
K.max = max_components,
F.threshold = F_threshold,
stimulation.intensity = stimulation_intensity,
stimulation.wavelength = stimulation_wavelength,
applied.time.cut = applied_time_cut,
background.fitting = FALSE,
verbose = FALSE,
output.plot = FALSE)
K.selected <- C.list$K.selected
# find components via fitting and F-statistics
C.list <- fit_OSLcurve(global_curve,
K.max = max_components,
F.threshold = F_threshold,
stimulation.intensity = stimulation_intensity,
stimulation.wavelength = stimulation_wavelength,
applied.time.cut = applied_time_cut,
background.fitting = FALSE,
verbose = FALSE,
output.plot = FALSE)
K.selected <- C.list$K.selected
K.selected
C.list
View(lum_data)
lum_data[[1]]@records[[1]]@components <- 1
lum_data[[1]]@records[[1]][["test"]] <- 1
lum_data[[1]]@records[[1]][["test"]] <- list(NULL)
lum_data[[1]]@records[[1]]@info[["COMPONENTS"]] <- data.frame(a = 1, b = 2)
View(lum_data)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_DataSet.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/decompose_DataSet.R')
View(C.list)
decompose_DataSet(lum_data, C.list[["components"]])
lum_data <- decompose_DataSet(lum_data, C.list[["components"]])
View(lum_data)
lum_data[[8]]@records[[12]]@info[["COMPONENTS"]]
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/markdown/Analyze_luminescence_package_test.RData")
load("C:/Users/mitte/Desktop/R/OSLdecomposition/markdown/Analyze_luminescence_package_test.RData")
lum_data[[1:2]]
lum_data[[1,2]]
View(lum_data)
lum_data[[1]]
lum_data[[1:2]]
lum_data[1:2]
lum_data[1,2]
lum_data[c(1,3)]
read_BIN2R()
class(lum_data)
lum_data[2]
lum_data[[2]]
test <- lum_data[2]
test <- lum_data[2, 5]
test <- lum_data[c(2,5)]
test
lum_data[["COMPONENTS"]] <- C.list
View(lum_data)
lum_data[[11]]
lum_data[[1]]@records[[1]]@info$COMPONENTS
?tolower("HehehE")
tolower("HehehE")
tolower("HehehE-_")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
install.packages("funr")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
library(funr)
render_Report(lum_data)
funr::get_script_path()
sessionInfo()
getwd()
install.packages("here")
library(here)
here()
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
?here
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
?sys.script()
View(lum_data)
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
remove.packages("OSLdecomposition", lib="~/R/win-library/3.6")
install.packages("C:/Users/mitte/Desktop/R/OSLdecomposition_0.3.18.tar.gz", repos = NULL, type = "source")
system.file("rmd", "report_HTML.Rmd", package = "OSLdecomposition")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
load("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")
render_Report(lum_data)
View(lum_data)
choose.files()
?choose.files()
file.choose(new = FALSE)
file.choose(new = TRUE)
choose.files()
choose.files(default = "report", caption = "Save file",
multi = FALSE, filters = c("html", "pdf","doc"),
index = 3)
getwd()
Sys.time()
Sys.time().Date()
?Sys.time()
Sys.Date()
name(lum_data)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/render_Report.R')
render_Report(lum_data)
render_Report(lum_data, "pdf")
save.image("C:/Users/mitte/Desktop/R/OSLdecomposition/TestSpace.RData")

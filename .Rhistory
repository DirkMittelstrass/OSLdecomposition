intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("record index", "irradiation time (s)")
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade > 0.5) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table, data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
component = input_table$name[k]))}}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
View(plot_table)
levels(plot_table$component)
data_dec[["DECOMPOSITION"]][["decompositon.input"]]
a <- data_dec[["DECOMPOSITION"]][["decompositon.input"]]$name
a
levels(plot_table$component) <- a
levels(plot_table$component)
levels(plot_table$component) <- factor(a, levels = a)
levels(plot_table$component)
factor(a, levels = a[1:3])
save.image("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
load("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
ggplot(barplots[[1]], aes(fill=component, y=y_axis, x=x_axis)) +
geom_bar(position="dodge", stat="identity") +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
Last_changed <-"2020-11-13"
# ToDo's:
# * Bug: The barplots sort the columns alphabetically
### Planned further features:
#
# * Change tab headers #{{j}} to record$sequence based nummeration
# * alternative bar-plot arrangement with all natural dose measurements in one plot etc.
# * Add kableExtra::add_header_above() with component names in table 1
# * barplot with initial signal compositions
# * Scatterplots or full correlogram of the components and the irradiation time
#     Hint: search for "Correlogram"
#     or: http://www.sthda.com/english/wiki/correlation-analyses-in-r
#     simple example:
#     pairs(subset(results, select = c("n.1", "n.2", "n.3", "IRR_TIME")))
library(knitr)
library(ggplot2)
library(gridExtra)
library(kableExtra)
library(scales)
knitr::opts_chunk$set(fig.width=7,
fig.asp=.6,
results = "asis",
warning=FALSE,
message=FALSE,
error=FALSE,
echo=FALSE,
cache=FALSE)
## set ggplot design
plot_theme <- theme_classic()
theme_set(plot_theme)
graph_colors <- c("red3","green3","royalblue3","darkorchid","gold","brown","pink")
# Not every list element in the data set may contain the selected record_type
# so we have to collect the data indices in a seperate list
record <- list()
n.curves <- 0
# assign some local objects just for better readable code:
K <- nrow(dec_data$decompositon.input)
record_type <- dec_data$parameters$record_type
background_fitting <- dec_data$parameters$background_fitting
input_table <- dec_data$decompositon.input
for (j in 1:length(data_set)) {
index <- c(NULL)
for (i in 1:length(data_set[[j]]@records)) {
if (data_set[[j]]@records[[i]]@recordType == record_type) {
index <- c(index, i)
n.curves <- n.curves + 1}}
if (length(index) > 0) {
record[[""]] <- list(sequence = j,
index = index)}}
ggplot(barplots[[1]], aes(fill=component, y=y_axis, x=x_axis)) +
geom_bar(position="dodge", stat="identity") +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
View(plot_table)
View(result)
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("record index", "irradiation time (s)")
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.5) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name)))
}
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
ggplot(barplots[[1]], aes(fill=component, y=y_axis, x=x_axis)) +
geom_bar(position="dodge", stat="identity") +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
ggplot(barplots[[1]], aes(fill=component, y=y_axis, x=x_axis)) +
geom_bar(position="dodge", stat="identity") +
geom_errorbar(aes(ymin = y_lower, ymax = y_upper)) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
ggplot(barplots[[1]], aes(fill=component, y=y_axis, x=x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
barplots[[1]]
barplots[[1]][barplots[[1]]$component == "Ultrafast",]
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$component == "Component 2",], aes(color = component)) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
c(1:3)*2
1:3*2
??odd
1:4.5
3:3
3:2
3:3.1
i_Lx <- 3:(result$record.index[which.max(result$IRR_TIME)])
i_Lx
which.max(result$IRR_TIME)
which.max(result$IRR_TIME)
result$IRR_TIME
numeric(result$IRR_TIME)
as.numeric(result$IRR_TIME)
which.max(result$IRR_TIME[2:length(result$IRR_TIME)])
which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
i_Lx
results <- data.frame(results, type = "")
result <- data.frame(result, type = "")
1:(nrow(result)/2) * 2
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("record index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = "")
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.5) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name)))
}
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component),
show.legend = FALSE) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
View(barplots)
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("record index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = "")
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.5) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component),
show.legend = FALSE) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
barplots[[1]][barplots[[1]]$type == "Lx",]
barplots[[1]][barplots[[1]]$type
barplots[[1]]$type
result$type
i_Lx
result$type[i_Lx]
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("record index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = factor("?", levels = c("?", "Lx", "Tx")))
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.5) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
result$type[
result$type
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component),
show.legend = FALSE) +
scale_x_continuous(name = paste0("measurement no. & received dose"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scientific) + #, labels = scientific
scale_fill_manual(values = graph_colors) + theme(legend.title = element_blank())
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component), linetype = "dashed", show.legend = FALSE) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Tx",],
aes(color = component), linetype = "dashed", show.legend = FALSE) +
scale_x_continuous(name = paste0("Record index / Received dose (s)"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "signal component intensity", labels = scales::label_number_auto())
View(result)
text_format <- ggplot2::theme(axis.title = ggplot2::element_text(size = 8),
plot.subtitle = ggplot2::element_text(size = 9, face = "bold"),
legend.position = c(1, 1), legend.justification = c("right", "top"),
legend.title = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 8))
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component), linetype = "dotted", show.legend = FALSE) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Tx",],
aes(color = component), linetype = "dashed", show.legend = FALSE) +
scale_x_continuous(name = paste0("Measurement no. / Received dose (s)"),
breaks = barplot_labels[[1]]$breaks,
labels = barplot_labels[[1]]$labels) +
scale_y_continuous(name = "Component intensity  ", labels = scales::label_number_auto()) +
scale_fill_manual(values = graph_colors) + text_format
Last_changed <-"2020-11-16"
# ToDo's:
# * Bug: The barplots sort the columns alphabetically
### Planned further features:
#
# * Change tab headers #{{j}} to record$sequence based nummeration
# * alternative bar-plot arrangement with all natural dose measurements in one plot etc.
# * Add kableExtra::add_header_above() with component names in table 1
# * barplot with initial signal compositions
# * Scatterplots or full correlogram of the components and the irradiation time
#     Hint: search for "Correlogram"
#     or: http://www.sthda.com/english/wiki/correlation-analyses-in-r
#     simple example:
#     pairs(subset(results, select = c("n.1", "n.2", "n.3", "IRR_TIME")))
library(knitr)
library(ggplot2)
library(gridExtra)
library(kableExtra)
library(scales)
knitr::opts_chunk$set(fig.width=7,
fig.asp=.6,
results = "asis",
warning=FALSE,
message=FALSE,
error=FALSE,
echo=FALSE,
cache=FALSE)
## set ggplot design
plot_theme <- theme_classic()
theme_set(plot_theme)
graph_colors <- c("red3","green3","royalblue3","darkorchid","gold","brown","pink")
text_format <- ggplot2::theme(axis.title = ggplot2::element_text(size = 9),
plot.subtitle = ggplot2::element_text(size = 10, face = "bold"),
legend.position = c(1, 1), legend.justification = c("right", "top"),
legend.title = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size = 9))
# Not every list element in the data set may contain the selected record_type
# so we have to collect the data indices in a seperate list
record <- list()
n.curves <- 0
# assign some local objects just for better readable code:
K <- nrow(dec_data$decompositon.input)
record_type <- dec_data$parameters$record_type
background_fitting <- dec_data$parameters$background_fitting
input_table <- dec_data$decompositon.input
for (j in 1:length(data_set)) {
index <- c(NULL)
for (i in 1:length(data_set[[j]]@records)) {
if (data_set[[j]]@records[[i]]@recordType == record_type) {
index <- c(index, i)
n.curves <- n.curves + 1}}
if (length(index) > 0) {
record[[""]] <- list(sequence = j,
index = index)}}
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component), linetype = "dotted", show.legend = FALSE) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Tx",],
aes(color = component), linetype = "dashed", show.legend = FALSE) +
scale_x_continuous(breaks = barplot_labels[[1]]$breaks, labels = barplot_labels[[1]]$labels) +
scale_y_continuous(labels = scales::label_number_auto()) +
labs(subtitle = "Signal component intensities of measurement sequence",
x = "Measurement no. / Received dose (s)", y = "Intensity")
scale_fill_manual(values = graph_colors) + text_format
ggplot(barplots[[1]], aes(color = component, y = y_axis, x = x_axis)) +
#geom_bar(position="dodge", stat="identity") +
geom_pointrange(aes(ymin = y_lower, ymax = y_upper)) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Lx",],
aes(color = component), linetype = "dotted", show.legend = FALSE) +
geom_line(data = barplots[[1]][barplots[[1]]$type == "Tx",],
aes(color = component), linetype = "dashed", show.legend = FALSE) +
scale_x_continuous(breaks = barplot_labels[[1]]$breaks, labels = barplot_labels[[1]]$labels) +
scale_y_continuous(labels = scales::label_number_auto()) +
labs(subtitle = "Signal component intensities of measurement sequence",
x = "Measurement no. / Received dose (s)", y = "Intensity") +
scale_fill_manual(values = graph_colors) + text_format
data_dec <- RLum.OSL_decomposition(data_fitted)
library(OSLdecomposition)
data_dec <- RLum.OSL_decomposition(data_fitted)
save.image("C:/Users/mitte/Desktop/TestSpaceEnv.RData")

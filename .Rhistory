intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Also build a data.frame with the initial signals
new_col <- data.frame(row = scales::percent(result[,colnames(result) == paste0("initial.signal.", k)]),
accuracy = 0.1, suffix = " %")
colnames(new_col) <- input_table$name[k]
initial_table <- data.frame(initial_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.95) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
intensity_tables[[j]] <- cbind(aliquot_table, initial_table)
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("data index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = factor("?", levels = c("?", "Lx", "Tx")))
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.95) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
# Also append column with initial signal percentage
for (k in 1:K) {
new_col <- data.frame(row = scales::percent(result[,colnames(result) == paste0("initial.signal.", k)]),
accuracy = 0.1, suffix = " %")
colnames(new_col) <- input_table$name[k]
aliquot_table <- cbind(aliquot_table, new_col)
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
View(aliquot_table)
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("data index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = factor("?", levels = c("?", "Lx", "Tx")))
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.95) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
# Also append column with initial signal percentage
for (k in 1:K) {
initial_signals <- result[,colnames(result) == paste0("initial.signal.", k)]
new_col <- data.frame(row = scales::percent(initial_signals, accuracy = 0.1, suffix = " %"))
colnames(new_col) <- input_table$name[k]
aliquot_table <- cbind(aliquot_table, new_col)
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("data index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = factor("?", levels = c("?", "Lx", "Tx")))
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.95) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
# Also append column with initial signal percentage
for (k in 1:K) {
initial_signals <- result[,colnames(result) == paste0("initial.signal.", k)]
new_col <- data.frame(row = scales::percent(initial_signals, suffix = " %")) # accuracy = 0.1,
colnames(new_col) <- input_table$name[k]
aliquot_table <- cbind(aliquot_table, new_col)
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
### This chunk rearranges the data for the dynamic tabs, no direct output is produced
intensity_tables <- list()
barplots <- list()
barplot_labels <- list()
for (j in 1:length(record)) {
result <- dec_data$results[dec_data$results$list.index == record[[j]]$sequence,]
if(result$IRR_TIME[1] == 0) result$IRR_TIME[1] <- "?"
aliquot_table <- subset(result, select = c(record.index, IRR_TIME))
plot_table <- data.frame(NULL)
colnames(aliquot_table) <- c("data index", "irradiation time (s)")
### Define Lx and Tx data points
result <- data.frame(result, type = factor("?", levels = c("?", "Lx", "Tx")))
# Where is the highest regenerated dose?
max_Lx <- which.max(result$IRR_TIME[2:length(result$IRR_TIME)]) + 1
# get a index sequence: i = 3, 5, 7, 9
i_Lx <- 1:((max_Lx - 1)/2) * 2 + 1
result$type[i_Lx] <- "Lx"
i_Tx <- 1:(nrow(result)/2) * 2
result$type[i_Tx] <- "Tx"
for (k in 1:K) {
intensities <- result[,colnames(result) == paste0("n.", k)]
#intensities_reduced <- intensities - result[,colnames(result) == paste0("n.residual.", k)]
sigmas <- result[,colnames(result) == paste0("n.error.", k)]
# Append current component to Table 1 table
new_col <- data.frame(row = paste0(round(intensities), " ± ", round(sigmas)))
colnames(new_col) <- paste0("$n_", k, " ± \\sigma_", k, "$ (", input_table$name[k] ,")")
aliquot_table <- cbind(aliquot_table, new_col)
# Include component only in the bar-plot if it is bleached to at least 50 %
bleaching_grade <- 1 - sum(result[,colnames(result) == paste0("n.residual.", k)], na.rm = TRUE) /
sum(intensities, na.rm = TRUE)
if (bleaching_grade >= 0.95) {
# Append current component to Figure 2 plot data
plot_table <- rbind(plot_table,
data.frame(x_axis = 1:length(intensities),
y_axis = intensities,
y_lower = intensities - sigmas,
y_upper = intensities + sigmas,
component = factor(input_table$name[k],
levels = input_table$name),
type = result$type))
}
}
# Also append column with initial signal percentage
for (k in 1:K) {
initial_signals <- result[,colnames(result) == paste0("initial.signal.", k)]
new_col <- data.frame(row = scales::percent(initial_signals, accuracy = 0.1, suffix = " %"))
colnames(new_col) <- input_table$name[k]
aliquot_table <- cbind(aliquot_table, new_col)
}
intensity_tables[[j]] <- aliquot_table
barplots[[j]] <- plot_table
barplot_labels[[j]] <- data.frame(breaks = 1:length(intensities),
labels = paste0("#", 1:length(intensities),
"\n", result$IRR_TIME, " s"))
# add record@info[["IRR_UNIT"]]
}
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
library(Luminescence)
library(OSLdecomposition)
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)
save.image("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
load("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
View(data_set)
View(BT594)
A <- BT594[[2]]@records[[1]]
A$COMPONENTS
A@info$COMPONENTS
A@info
colnames(A@info)
names(A@info)
"COMPONENTS" %in% names(A@info)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
plot_OSLcurve(BT594[[1]]record[[1]])
BT594[[1]]record[[1]]
plot_OSLcurve(BT594[[1]]@record[[1]])
plot_OSLcurve(BT594[[1]]@records[[1]])
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
plot_OSLcurve(BT594[[1]]@records[[1]])
plot_OSLcurve(BT594[[1]]@records[[2]])
plot_OSLcurve(BT594[[1]]@records[[3]])
class(BT594[[1]]@records[[3]])
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
citation("kableExtra")
?decompose_OSLcurve
getwd()
View(BT594)
?install.packages()
?tempfile
tempdir()
# Script example
# Load libraries
library(OSLdecomposition)
library(Luminescence)
# Read BIN file
data <- read_BIN2R(file.choose(), fastForward = TRUE)
# Check the data for consistency and apply some corrections (optional)
data <- RLum.OSL_correction(data)
# Identify the OSL components occuring in your data set
data <- RLum.OSL_global_fitting(data)
# Separate components in each measurement
data <- RLum.OSL_decomposition(data)
# The dose calculation is handled by the Luminescence package
# But as OSLdecomposition data sets are not support yet, we need a workaround:
.LuminescenceEnv <- new.env(parent = emptyenv())
source(system.file("beta", "analyse_SAR.CWOSL_beta.R", package = "OSLdecomposition"))
source(system.file("beta", "calc_OSLLxTxDecomposed.R", package = "OSLdecomposition"))
# Calculate Fast component De values
results_fast <- analyse_SAR.CWOSL_beta(data, OSL.component = 1)
# Calculate Medium component De values
results_medium <- analyse_SAR.CWOSL_beta(data, OSL.component = 2)
# Compare the results in an Abanico plot
plot_AbanicoPlot(list(results_fast, results_medium))
save.image("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R', encoding = 'UTF-8')
# the following three lines load necessary functions which will be integrated in Luminescence in the future
.LuminescenceEnv <- new.env(parent = emptyenv())
source(system.file("beta", "analyse_SAR.CWOSL_beta.R", package = "OSLdecomposition"))
source(system.file("beta", "calc_OSLLxTxDecomposed.R", package = "OSLdecomposition"))
library(Luminescence)
library(OSLdecomposition)
data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(data_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
#data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(file.choose(), fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
load("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
View(barplot_labels)
0:8
c(rep(0, 2))
c(rep(0, 2):2)
c(rep(0, 2):rep(2, 2))
rep(0:8, 2)
sort(rep(0:8, 2))
sort(rep(0:8, 2))[1:2]
N <- 10
sort(rep(0:N, 2))[1:N]
sort(paste0("L",0:N), paste0("T",0:N))[1:N]
paste0("L",0:N)
a <- NULL
for (i in 1:N) a <- c(a, paste0("L",i), paste0("T",i))
a
for (i in 0:((N-1)/2)) a <- c(a, paste0("L",i), paste0("T",i))
a
a <- NULL
for (i in 0:((N-1)/2)) a <- c(a, paste0("L",i), paste0("T",i))
a
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/plot_OSLcurve.R', encoding = 'UTF-8')
save.image("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
library(OSLdecomposition)
load("C:/Users/mitte/Desktop/TestSpaceEnv.RData")
View(components)
View(OSLdata_fitted)
OSLdata_fitted[["OSL_COMPONENTS"]][["component.tables"]][[3]]
name <- OSLdata_fitted[["OSL_COMPONENTS"]][["component.tables"]][[3]]$name
grepl("ompone", name, fixed = TRUE)
grepl("ast", name, fixed = TRUE)
!grepl("ast", name, fixed = TRUE)
A <- c(1, 2, 3)
A[!grepl("ast", name, fixed = TRUE)] <- paste0(A[!grepl("ast", name, fixed = TRUE)], name[!grepl("ast", name, fixed = TRUE)])
A
?sprintf
sprintf("min 10-char string '%10s'",
c("a", "ABC", "and an even longer one"))
which(max(c(1,2,3,4,2)))
which(max(c(1,2,3,4,2)) == c(1,2,3,4,2))
which(max(c(1,6,3,4,2)) == c(1,6,3,4,2))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
library(OSLdecomposition)
?fit_OSLcurve
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
# Create curve with two components
curve <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9),
Y = c(42, 20, 12, 7, 5, 4, 3.1, 2.4, 2))
## Not run:
# Perform fitting
components <- fit_OSLcurve(curve, F.threshold = 3)
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/fit_OSLcurve.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_correction.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
library(OSLdecomposition)
library(Luminescence)
library(OSLdecomposition)
#data_path <- system.file("examples", "BT594_607_608_612_619.BIN", package = "OSLdecomposition")
BT594 <- read_BIN2R(file.choose(), fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, stimulation_intensity = 50, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE, image_format = "png")
output_dir <- file.choose()
output_dir
normalizePath(paste0(output_dir,"/report_figures/")),)
normalizePath(paste0(output_dir,"/report_figures/"))
?normalizePath
file.path(output_dir)
dirname(output_dir)
normalizePath(paste0(dirname(output_dir),"/report_figures/"))
normalizePath(paste0(dirname(C:/Users/mitte/Desktop/R/OSLdecomposition/man/figures),"/report_figures/"))
normalizePath(paste0(dirname("C:/Users/mitte/Desktop/R/OSLdecomposition/man/figures"),"/report_figures/"))
normalizePath(paste0(dirname("C:/Users/mitte/Desktop/R/OSLdecomposition/man/figures/"),"/report_figures/"))
normalizePath(paste0(dirname("C:/Users/mitte/Desktop/R/OSLdecomposition/man/figures/j"),"/report_figures/"))
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_correction.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R', encoding = 'UTF-8')
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50)#, report = TRUE, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3)#, report = TRUE), image_format = "png")
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50 , report = TRUE)#, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3, report = TRUE)#, image_format = "png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
file_path <- file.choose()
BT594 <- read_BIN2R(file_path, fastForward = TRUE)
BT594 <- BT594[1:24] # just the first 24 ailquots belong to BT594
BT594 <- RLum.OSL_correction(BT594)
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50 ,
report = TRUE, report_dir = file_path)#, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3,
report = TRUE, report_dir = file_path)#, image_format = "png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50 ,
report = TRUE, report_dir = file_path)#, image_format = "png")
file_path
normalizePath(file_path)
dir.create(file_path)
dir.create(paste0(file_path, "\\"))
dir.create(paste0(file_path, "\\fff\\"))
dir.create(paste0("C:\\Users\\mitte\\Desktop\\Poster", "\\fff\\"))
?dirname
dirname(file_path)
dirname("C:\\Users\\mitte\\Desktop\\Poster\\")
file.exists("C:\\Users\\mitte\\Desktop\\Poster\\")
file.exists("C:\\Users\\mitte\\Desktop\\Poster")
?file.exists
getwd()
dirname(getwd())
normalizePath("C:/Users/mitte/Desktop")
normalizePath("C:/Users/mitte/Desktop/")
normalizePath("C:/Users/mitte/Desktop//")
normalizePath("C:/Users/mitte/Desktop\\/")
basename(file_path)
?tools::file_path_sans_ext
tools::file_path_sans_ext(file_path)
tools::file_path_sans_ext("C:\\Users\\mitte\\Desktop\\Poster\\")
tools::file_path_sans_ext("C:\\Users\\mitte\\Desktop\\Poster")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_decomposition.R', encoding = 'UTF-8')
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/RLum.OSL_global_fitting.R', encoding = 'UTF-8')
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50 ,
report = TRUE, report_dir = file_path)#, image_format = "png")
source('C:/Users/mitte/Desktop/R/OSLdecomposition/R/utils.R')
BT594 <- RLum.OSL_global_fitting(BT594, K_maximum = 3, stimulation_intensity = 50 ,
report = TRUE, report_dir = file_path)#, image_format = "png")
BT594 <- RLum.OSL_decomposition(BT594, K = 3,
report = TRUE, report_dir = getwd(), image_format = NULL)
library(OSLdecomposition)

---
title: "Module tests for plot_MultiExponential()"
author: "Dirk Mittelstra√ü"
date: "2024-09-02"
format:
  html:
    toc: true
    toc-location: right
    toc-expand: true
    self-contained: true
editor: visual
execute:
  output: true
  warning: true
---

This document collects scripts for developing, bug-fixing and pre-release validating a specific function.

## Sourcing

Is the function successfully sourced?

```{r sourcing}

library(OSLdecomposition)
source("../R/plot_MultiExponential.R")

```

## Define signal curves

```{r}
 # ToDo: Create a couple of test curves with wild varity of signal shapes

cases <- list()
add_component_case <- 
  function(cases, lambda, n, 
           channel_width = 0.1, 
           channel_number = 400, 
           noise = 0, 
           background = 0,
           title = "Unspecified test case"){
    
    components <- data.frame(name = paste("Component", 1:length(n)),
                             lambda = lambda, 
                             n = n)
    curve <- simulate_OSLcomponents(components, 
                                    channel.width = channel_width,
                                    channel.number = channel_number,
                                    simulate.curve = TRUE, 
                                    add.poisson.noise = TRUE,
                                    add.gaussian.noise = noise,
                                    add.background = background)
  
    case <- list(components = components,
                 curve = curve,
                 title = title)
    
    cases <- c(cases, list(case))
    return(cases)
  }

cases <- add_component_case(cases,
                   lambda = c(1, 0.2, 0.02),
                   n = c(1000, 1000, 10000),
                   title = "Typical quartz OSL curve")

cases <- add_component_case(cases,
                   lambda = c(2, 0.5, 0.2, 0.001),
                   n = c(200, -500, 2000, 100000),
                   channel_width = 0.875,
                   channel_number = 42,
                   title = "Atypical low-res measurement with stretched medium component")

cases <- add_component_case(cases,
                   lambda = c(0.05, 0.01, 0.003, 0.0005, 0.00001),
                   n = c(-10e5, 10e5, 10e6, 10e7, 5e9),
                   channel_width = 2,
                   channel_number = 5000,
                   noise = 2000,
                   title = "Typical IR-RF curve")

cases <- add_component_case(cases,
                   lambda = c(0.1, 0.02),
                   n = c(-10e4, 10e5),
                   channel_width = 0.2,
                   channel_number = 200,
                   title = "Increasing signal")

cases <- add_component_case(cases,
                   lambda = c(1, 0.01),
                   n = c(10, 100),
                   noise = 10,
                   title = "Just noise")



```

## Stacked areas with linear axes

```{r}

for (case in cases) {
  plot_MultiExponential(case$curve, case$components, 
                        component.type = "fill", main = case$title)
}
```

## Graphs with linear axes

```{r}
for (case in cases) {
  plot_MultiExponential(case$curve, case$components, 
                        component.type = "line", main = case$title)
}
```
